#!/bin/bash
# sys_info_page: program to output a system information page
progname=$(basename $0)
title="system information report for $hostname"
current_time=$(date +"%x %r %z")
timestamp="generated $current_time, by $user"
report_uptime () {
    cat <<- _eof_
        <h2>system uptime</h2>
        <pre>$(uptime)</pre>
    _eof_
    return
}
report_disk_space () {
    cat <<- _eof_
        <h2>disk space utilization</h2>
        <pre>$(df -h)</pre>
    _eof_
    return
}
report_home_space () {
    local format="%8s%10s%10s\n"
    local i dir_list total_files total_dirs total_size user_name
    #for root
    if [[ $(id -u) -eq 0 ]]; then
        dir_list=/home/*
        user_name="all users"
    else
        dir_list=$HOME
        user_name=$User
    fi
    echo "<h2>HOME SAPCE ($user_name)</h2>"
    for i in $dir_list;do
        total_files=$(find $i -type f | wc -l)
        total_dirs=$(find $i -type d | wc -l)
        total_size=$(du -sh $i | cut -f 1)
        echo "<h3>$i</h3>"
        echo "<pre>"
        printf "$format" "Dirs" "Files" "Size"
        printf "$format" "----" "-----" "----"
        printf "$format" "$total_dirs" "$total_files" "$total_size"
        echo "</pre>"
    done
    return
}
usage () {
    echo "$progname: usage: $progname [-f file | -i]"
    return
}
write_html_page () {
    cat <<- _eof_
        <html>
            <head>
                <title>$title</title>
            </head>
            <body>
                <h1>$title</h1>
                <p>$timestamp</p>
                $(report_uptime)
                $(report_disk_space)
                $(report_home_space)
            </body>
        </html>
    _eof_
    return
}
# process command line options
interactive=
filename=
while [[ -n $1 ]]; do
    case $1 in
        -f | --file)          shift
                              filename=$1
                              ;;
        -i | --interactive)   interactive=1
                              ;;
        -h | --help)          usage
                              exit
                              ;;
        *)                    usage >&2
                              exit 1
                              ;;
    esac
    shift
done
# interactive mode
if [[ -n $interactive ]]; then
    while true; do
        read -p "enter name of output file: " filename
        if [[ -e $filename ]]; then
            read -p "'$filename' exists. overwrite? [y/n/q] > "
            case $reply in
                y|y)    break
                        ;;
                q|q)    echo "program terminated."
                        exit
                        ;;
                *)      continue
                        ;;
            esac
        fi
    done
fi
# output html page
if [[ -n $filename ]]; then
    if touch $filename && [[ -f $filename ]]; then
        write_html_page > $filename
    else
        echo "$progname: cannot write file '$filename'" >&2
        exit 1
    fi
else
    write_html_page
fi
